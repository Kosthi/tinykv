syntax = "proto3";
package raft_serverpb;

import "eraftpb.proto";
import "metapb.proto";

// The message sent between Raft peer, it wraps the raft meessage with some meta information.
// Raft 节点之间发送的消息，它将 Raft 消息与一些元信息封装在一起。
message RaftMessage {
  uint64 region_id = 1;
  metapb.Peer from_peer = 2;
  metapb.Peer to_peer = 3;
  eraftpb.Message message = 4;
  metapb.RegionEpoch region_epoch = 5;
  // true means to_peer is a tombstone peer and it should remove itself.
  // true 表示 to_peer 是一个墓碑节点，它应该自我移除。
  bool is_tombstone = 6;
  // Region key range [start_key, end_key). (Used in 3B)
  // 区域键范围 [start_key, end_key)。（在 3B 中使用）
  bytes start_key = 7;
  bytes end_key = 8;
}

// Used to store the persistent state for Raft, including the hard state for raft and the last index of the raft log.
// 用于存储 Raft 的持久状态，包括 Raft 的硬状态和 Raft 日志的最后一个索引和任期。
message RaftLocalState {
  eraftpb.HardState hard_state = 1;
  uint64 last_index = 2;
  uint64 last_term = 3;
}

// Used to store the persistent state for Raft state machine.
// 用于存储 Raft 状态机的持久状态。
message RaftApplyState {
  // Record the applied index of the state machine to make sure
  // not apply any index twice after restart.
  // 记录状态机应用的索引，以确保在重启后不重复应用任何索引。
  uint64 applied_index = 1;
  // Record the index and term of the last raft log that have been truncated. (Used in 2C)
  // 记录已被截断的最后一个 Raft 日志的索引和任期。（在 2C 中使用）
  RaftTruncatedState truncated_state = 2;
}

// The truncated state for Raft log compaction.
// Raft 日志压缩的截断状态。
message RaftTruncatedState {
  uint64 index = 1;
  uint64 term = 2;
}

// Used to store Region information and the corresponding Peer state on this Store.
// 用于存储区域信息及该存储上的对应节点状态。
message RegionLocalState {
  PeerState state = 1;
  metapb.Region region = 2;
}

// Normal indicates that this Peer is normal;
// Tombstone shows that this Peer has been removed from Region and cannot join in Raft Group.
// Normal 表示该节点是正常的；
// Tombstone 表示该节点已从区域中移除，无法加入 Raft 集群。
enum PeerState {
  Normal = 0;
  Tombstone = 2;
}

// The persistent identification for Store.
// It used to recover the store id after restart.
// 存储的持久性标识。
// 用于在重启后恢复存储 ID。
message StoreIdent {
  uint64 cluster_id = 1;
  uint64 store_id = 2;
}

// Snapshot sending and reciveing related messages.
// Not included in the course scope.
// 与快照发送和接收相关的消息。
// 不在课程范围内。
message KeyValue {
  bytes key = 1;
  bytes value = 2;
}

message RaftSnapshotData {
  metapb.Region region = 1;
  uint64 file_size = 2;
  repeated KeyValue data = 3;
  SnapshotMeta meta = 5;
}

message SnapshotCFFile {
  string cf = 1;
  uint64 size = 2;
  uint32 checksum = 3;
}

message SnapshotMeta {
  repeated SnapshotCFFile cf_files = 1;
}

message SnapshotChunk {
  RaftMessage message = 1;
  bytes data = 2;
}

message Done {}
